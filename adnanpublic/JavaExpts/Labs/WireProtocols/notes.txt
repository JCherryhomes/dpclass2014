Executive Summary

Use the GSON library to pass JSON objects between a microblogging client
and server.

Objectives

- Gain familiarity with the concept of object serialization/deserialization. 
- Get hands on experience with the JSON format and the GSON library for creating and parsing JSON.

Context

Microbologging clients send and receive messages from a server. 

The messages from clients are of the following types: 

  - create posting: create a new posting 
  - update: change an existing posting
  - upvote: client votes up a posting
  - like: client likes the poster
  - delete: remove an existing posting
  - query: return all postings matching a given criterion. return posting list ordered by decreasing posting time
  - querybyid: return the posting with the specified id
  - trending: return a list of postings made within one hour 
              of the most recent posting that have received the most upvotes 
              


You are to design the send message class. The send message objects should include
the following fields, some of which are specific to the type of message:

  type              // one of the above types
  String author     // alphanumeric string, not more than 20 chars
  long date         // as returned by getTime() from Java Date object. if 0, use current
                    // time, otherwise, use the specified time
  long dateStart    // lower bound on posting time for query, use for query if positive (inclusive)
  long dateEnd      // upper bound on posting time for query, use for query if positive (inclusive)
  String subject    // general string
  String body       // general string
  double latitude   // latitude coordinate associated with posting
  double longitude  // longitude coordinate associated with posting
  double distance   // used for queries, when positive, return 
                    // only those postings within Euclidean distance of lat/long fields
                    // distance between (lat1,long1) and (lat2,long2) 
                    // is \sqrt((lat2-lat1)^2 + (long2-long2)^2)
  long id           // used for updates. the update specifies what the new 
                    // fields are to be. upvoting is done based on posting id.
  long pageSize     // when positive, maximum number of postings to return
  long pageOffset   // when positive, starting point for postings, inclusive

  /* queries are specified in terms of 
   *
   * time range: use dateStart and dateEnd fields
   * author, subject, body: each of these, if not null, is to be treated as a set
   * of strings separated by white space. Include a posting if it matches all the
   * strings. 
   * location: use lat, long and distance
   * pageSize: less than or equal to zero: use 5 for default, otherwise
   * use the specified number as the maximum number of postings to return
   * pageOffset: return pageSize postings starting from pageOffset (inclusive)
   *
   * The returned posting list should be ordered by decreasing ids.
   * 
   */ 

The messages from the server are as follows.  For queries, the received message consists 
of a list of postings. For postings, the server responds with the id it assigned 
to that posting.

You are to design two classes: one from client to server, one from server to client.
You must serialize individual objects into JSON, and deserialize them back.

We will test your code by making calls to your code for constructing client messages.

Note: in the interests of simplicity, we've made a number of compromises to the architecture.
For example, it would be more appropriate to use a class hierarchy to describe the 
different types of client, rather than lumping them into one class. (The same
is true on the server side.)

need guava-13.0.1.jar:gson-2.2.2.jar:junit-4.10.jar



